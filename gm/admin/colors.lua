-- i think i did too much math than obfuscation
bit32={}local a=32;local b=2^a;bit32.bnot=function(c)c=c%b;return b-1-c end;bit32.band=function(d,e)if e==255 then return d%256 end;if e==65535 then return d%65536 end;if e==4294967295 then return d%4294967296 end;d,e=d%b,e%b;local f=0;local g=1;for h=1,a do local i,j=d%2,e%2;d,e=math.floor(d/2),math.floor(e/2)if i+j==2 then f=f+g end;g=2*g end;return f end;bit32.bor=function(k,l)if l==255 then return k-k%256+255 end;if l==65535 then return k-k%65536+65535 end;if l==4294967295 then return 4294967295 end;k,l=k%b,l%b;local m=0;local n=1;for o=1,a do local p,q=k%2,l%2;k,l=math.floor(k/2),math.floor(l/2)if p+q>=1 then m=m+n end;n=2*n end;return m end;bit32.bxor=function(r,s)r,s=r%b,s%b;local t=0;local u=1;for v=1,a do local w,x=r%2,s%2;r,s=math.floor(r/2),math.floor(s/2)if w+x==1 then t=t+u end;u=2*u end;return t end;bit32.lshift=function(y,z)if math.abs(z)>=a then return 0 end;y=y%b;if z<0 then return math.floor(y*2^z)else return y*2^z%b end end;bit32.rshift=function(A,B)if math.abs(B)>=a then return 0 end;A=A%b;if B>0 then return math.floor(A*2^-B)else return A*2^-B%b end end;bit32.arshift=function(C,D)if math.abs(D)>=a then return 0 end;C=C%b;if D>0 then local E=0;if C>=b/2 then E=b-2^(a-D)end;return math.floor(C*2^-D)+E else return C*2^-D%b end end;local F=string['char']local G=string['byte']local H=string['sub']local I=bit32 or bit;local J=I['bxor']local K=table['concat']local L=table['insert']local function M(N,O)local P=0-0-(0-0)-(0+0-(849-(254+595)))-(126-(55+71))+0-0-(0-0)-(1790-(573+1217))-(0-0-(0-(619-(555+64))-(1550-(857+74)-(1123-(367+201)+64)))-(1858-(214+713)-(2504-1647+102-28)-(0+0)-(90+478-(1244-(282+595)+1007-(118+688))))-(975-(25+23)-(42+172+713)-(1637-(1523+114)+0+0)))local Q;while true do if P==7958-5597-(2140-(16+716)+130-38)-(129+685+1779-857-(282+1660-(68+997)))-(9-5-(1924-(175+110)-(3844-2321+1384-(226+1044)))-(3035-(503+1293)-(2172-1673+173-(32+85)+1352-(974+19+295))-(790-(53+182)+2060-(68+997)-(3084-(892+65)-(631-405+755+289)+322-(1309-(810+251))))))then return K(Q)end;if P==397+174+285+643-(1154-670-(32+85)+363-166+7-3)-(857+550-(43+490)+407-(87+263))-(0+0)-(1137-(67+113)-(655+237+65)+5425-3215-(944+339)-(96+299-(287-106)+1308-(2364-1769)))then Q={}for R=1871-(802+150)-(234-147+208+55)-(272-(120-53+113)+3435-2631-(1311-905+1862-(404+1335))+1801-(1274+475+24-4)+1121-(915+82)+127-82),#N do L(Q,F(J(G(H(N,R,R+2585+1851-(2966-(10+327))-(145+63+96-22+71+142+1569-(1069+118))-(382+468-636+7039-5374-(802+150))-(3715-2077-(8968-4868-(449+2128)+37+77)+0-(1819-(580+1239))+0-0)-(5508-2408-(2000+16)-(1454-(16+418)+2831-(368+423)-(2875-1960)-(50+46-28+2012-(10+8)-(915+315-233)))-(1425-(2342-(416+26)-(2040-1401-(1967-1554)+449+595)+3847-(1045+791)+2549-1108-(8849-5353-(1275-(145+293)))))-(2260-(44+386)-1210-(238-(1724-(1281+293))+1953-(998+488)+299+642-(3543-1957-(1069+97+21)-(844-(201+571)-(1178-(116+1022))+669-(237-180+527))+343+241+1438-(39+2+5059-3673))))))),G(H(O,1629+20290-14576-(7711-(814+45)-(41-24+86)-(106+1844-1058+5+7+938-(261+624)))-(2704-1182-(1745-(1020+60))+2770+887+424-(5285-(4338-(630+793)))-(14944-10534-(13669-10782)+83+126+1-96))-(3216-(1074+82)-(3786-2058-(2152-(214+1570)+1456-1033))-(4000-(760+987)-(634+902)-(149-(1975-(1789+124))+274+7-(10+774-(745+21)))+266+507-(1573-1001))+1617-(512+114)-(2510-1870-(1165-718)+21+1502-775+2+164-(232-165+53+60)))-(129+558-(327+89+1081-(87+968))+88-(118-83+2201-(109+1885)-(1925-(1269+200)-(1377-1064)))+273+27+397-(1053-(98+717)-103+1816+718-(856-(802+24)+79-44)-(4366-908-(1558-(447+966)+293)-(7364-4674-(1861-(1703+114)+386))+4126-(376+325)-(1635-637+488)-(56+199+547+123+75-48))+8578-5790-(670-469+205+366)-(538+782-(34+82+744+278)-(1528-834-(361+233-(9+5)))+2183-(85+291)-(2075-(243+1022)))-(24585-18124-4909-(226+506+107+1611-(1123+57))+1871+428-(269-(163+91)+2328-(1869+61))+3305-(1427+192)-(6+12+335+629)-(10537-7545-(2124-1209+472-164-226)))))+R%#O,241+1515-(158-42-(410-(192+134))+1577-(316+960)-216)-(11144+720-(4744+3780-(20+2304-(1329+145)))-(937+277+340+2943-(140+831)-(753+61+171-126))+2209-(1409+441)-(2019-(1202+604))-(720-(15+703)+15+17)+1189-(2959-1890+480-(262+176)+1797-(345+1376)))-(1575-(198+490)-(261+546+78)-(4-3)+1-(0-0)-0-(86+401+872-401-(1236-(1020+60)+1938-(2408-(696+510))+65)))+R%#O+3124-1634-(1668-(2279-(1091+171)))+626-398+1424-(102+528+1827-(125+909))+6661-4695-(1742-(4325-2951)+1974-(1126+425))-(1631-1139-(492-(123+251)+287)+4809-3841)-(205+250+1396-(208+490)-(229+2476-1919)+678+21-(783+974-(1596-(660+176)+119+868)+233-(14+188)-(698-(534+141)))-(1062+1578-(213-(51+44)+1003)-(928+2361-(1916+249)))-(2199+88-(3759-1970+196-72)-(2959-1904-(1471-(228+498)+12+9))))-(1175+669-(538-(115+281)+235)-(807-(174+489)+272+13-7+20)-(3417+710-(6348-3721)-1030)+6354-(5258-(303+221))+1287-(231+1038)+7828-5693-(1989+397+1519-(550+317)-(3538-(171+991)-(87+968)))-(971-298-(2143-1623)-(209-131+17-10)+1892-545-(950+236-661-(145+1706-(1249-802+1251-(134+151)))+1926-(970+695)+2))-(312-148+2106-(582+1408)-(100-71+1285-(111+1137))+7163-1469-(13618-10004)-(4138-(1195+629)-(1703+150-36)-(986-(187+54)-(1156-(162+618)+325)+586+250-(300+150))+184-(151-80))-(20478-8297-7809-(241+2829-(3708-(1373+263))+488)-(1487-(451+549)+384+832+250-136)+823-(326+445)-(13-4+8-3)+1840-(746+638)-(32+53+441-150)))))))%(871+1922-(218+123)-(243+2603-(1535+46))-(4060-1565-(238+1+514)+212+1252-1079-(1094+232-(359+1022-(1123+617-(306+254))+1183-612)-(3005-(1293+519)+17+256-(166-81+1498-(899+568)+1276-(108+55+392-301)))+12406-7279-(1869+664-(268+335))-(2719-(60+230))+78+105+93)+39+151+1036-(426+146)-(770-438)-(167+1223-(1941-(282+1174))-(1544-(295+592)))))))end;P=1313-(569+242)+9119-5953-(151+2484)-(1061-(1312-(706+318)))-(1282-(721+530)+1+8775-5749-(1640-(945+326)+1900-1139)-(725+89+1087+432-(994+335+145))-(1502-(271+429)+615+54-300-(1719-(1408+92))))+2249-1103-(2096-(461+625)-(1428-(993+295)+44+787)+1852-(418+753))-(3734-(559+1288)-(1409+441)+10+22+34+711-(13+441)+138+1194-432-(975-714+183+441)-(184+542-(15+3501-2798))+889-(406+123)-(1913-(1749+20)+46+146)-(1327-(1249+73)+2+3)-(2669-(466+679)-(630-368+503-327)-(559+286+2075-(106+1794)+564+1217-(88+257+1376)))+5381-3558-(725-457+476-(4+110)+1481-(198+1074-(57+527)))-(1064+203-(2407-(41+1386))-(587-(17+86)-282)+146+68+70+7)+3066-1691-(2015-1319+676-(122+44)))end end end;local S=M("\194\203\210\35\242","\126\177\163\187\69\134\219\167")local T=M("\55\204\40","\156\67\173\74\165")local U=M("\38\178\88\3\181\52\67","\38\84\215\41\118\220\70")local V=1729+657-(1900-652)+734-309-(44991-31429-(1091+171)-(966+596+8807-(89+578))-(1933+443-(235+1386)+7791-3945-2686))-(1678-(30+35)-(85+38+251)-(9735-(1043+214)-(7232-5319+1274-(323+889))-(61708-38782-18312)-(3940-(361+219)-(208+810-(53+267))-(455+1556-(1664-(15+398))+2920-(565+2350-(18+964)))+270+1725-(91+60+1638+210-154+40+28))+65)+3022-(1477+302-118)-(731+283-(170+99)+863-(497+345)))local W=1+1+850-(20+830)-(1+0)+856-(403+161+292)+962-(116+10)-(31+629+650-474)local X=4293922144-(1601+186)-(0+0)-(0-(230+74-(19+225+798-(542+196))))-(388+525+274-(6070-(832+570)-(41+932-497)-(2943+180)+1+0+8+7+37+65))-(6588-(36-22+91+97)-(9155-5584)-(2825-(926+1829-(1126+425)+2129-(884+916)))+1310-(118+287)-(8222-6124-(310+224+794-(232+421))-(1924-(1569+320)+13+39+3702-(118+1003)-(4579-3014+425-(142+235)))+980-(316+289)+48))local Y=4298-2656+294-229-(171+3516-(176+20+71)-(6531-(553+424)-(4364-(666+787))))-(5127-2415-(768+103)-(1053+73-(1229-(79+175)+117+0)+4-(1-0)+2026+1452-(952+1286))-(10+6+119-80+61-29+1454-783+1064-682-(4663-2580-1496)-(599-(34+81+1357-1076)))+2479-(239+514)-(697+321)+6+5-(4+2))local Z=2205-(333+613-499+2129-(797+532)+121+45)-(2321-(444+870)-(3627-2084-(2106-(373+829)))+2240-(6244-4541+186+27-(48+51)))+2134-1433-(1107-(476+255)+2322-(369+761)-(319+231+1561-(485+759)))-(0-0-(0-0))+5-(1190-(442+747))-(850-(64+174)-(86+516+955-(88+858)))-(9+19-(7+1)-(1804-585-(785-(144+192)+956-(42+174))-(892-(621+205+46))+19+3-14))local T={4089535246-(57+77+206-55)- -(154634348-95943103-(3292-2322+695)+279900496-(1036+37)-(133221324-(363+1141)))-(7091-(1183+397)-(413+169+2741-1333)-(1512+410)-(3095-(791-531+3118-(641+839))-(9+4+1))+1213+409-(3129-(1913+62))-(1334-(579+339)+84-52-6))-(593+696-(2598-(565+1368))-(1203-883-(1896-(1477+184))+2881-766-(1114+81+2161-1532))-(4815-(564+292)-(4532-1905)-(732-489+1326-(244+60))+161+1648-(1917-(29+1448))-(962+288-(663-(41+435)+54))-(1985-(938+63)-(162+2328-1710)+960+288-(2027-(936+189)+1830-(389+1138))))+371+756+2094-(1565+48)-(1367+1098-(829+513)+57)+354+25+1735-(320+1225))-(1497-(782+356)-(457-(176+91))+4501-2773-(2585-(157+1307)+569)+2188-(821+1038)-(940-563-(31-9+21+171)+269-117-(23+38))+1128-(975+117)+2291-(157+1718)-(3054+708-(88+1285+68+195)-(6634-4765+94-33))+4163-2945-(1469-(697+321)+1495-946)+374-197+880-498-(1395-(345+540)-(568-203)+735-342-100)),5149713051-(322+905)-(562-(134+200+570-342))-(1051+782-(1353-(602+9))-(1256-(449+740)+3143-(826+46)-(2238-(245+702)))+1219-833)-(280167357+591354010-(2713-(746+317+321)+108+37)-(2640-(260+1638)+2736-1509-(580-(382+58)+1261-(1379-949))+1453-965))-(454+92+1376-(3656-(1665+241)-(218+123)+911-470)+2547-1690+1220-(902+303)-(720+876-(407+1128+121-75)+1182-483+8-4)+563+1567-916+83-44+229-(51+532-(700-(2512-(1121+569)-(1542-(298+938)+1513-(233+1026))+225-(22+192)+848-(483+200))+1897-(2408-(1404+59)-(1642-1042)+968+2074-(636+1030)))+2014-(1036+990-(970+23)-(59+139+133+1824-(899+789-(55+166)))+1937-(753-192))))-(3406-(468+297)-(693-(334+228)+225-158+1185-695)-(4929-2802+1478-(5057-2268)-(1382-(36+261)-(77+191+1703-(34+1334))-(807-(141+95)-(59+1+89+141))+2941-1798-(1709-(1035+248)+167-(20+1)))+328+5773-3371-(505+1647-(772-490+826+348)+664+611-(807-233+876-(314+371)))-(547+380-(732-(92+71)+242)+3049+3123-4029-(223-158+1056)))+2760-(706+318)-(937-379+1298-(574+191)+1173+249-(382+339+1327-797))-360),X}local _=_G[U](T)local a0=_[S](T)_.shuffle(a0)
